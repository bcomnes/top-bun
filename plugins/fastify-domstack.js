/**
 * @fileoverview Fastify plugin for DomStack
 * 
 * EXPERIMENTAL: This plugin integrates Fastify with DomStack to provide
 * server-side rendering capabilities. It depends on DomStack internals
 * that may change in future versions.
 * 
 * Features:
 * - Builds DomStack sites at server startup
 * - Serves static files generated by DomStack
 * - Watch mode for automatic rebuilding during development
 * - Server-side routes using server.js files that integrate with DomStack layouts
 */

import { join, resolve, dirname } from 'node:path'
import { fileURLToPath } from 'node:url'
import { mkdir } from 'node:fs/promises'
import fastifyStatic from '@fastify/static'
import fp from 'fastify-plugin'
import { DomStack } from '../index.js'
// We don't need to directly import buildPages
import { identifyPages } from '../lib/identify-pages.js'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

/**
 * @typedef {import('fastify').FastifyInstance} FastifyInstance
 * @typedef {import('fastify').FastifyReply} FastifyReply
 * @typedef {import('fastify').FastifyRequest} FastifyRequest
 */

/**
 * @typedef {object} FastifyDomStackOptions
 * @property {string} src - Source directory for DomStack
 * @property {string} [dest] - Destination directory for built assets (defaults to '.fastify-domstack')
 * @property {object} [domstackOpts] - Additional options to pass to DomStack
 * @property {string} [prefix] - URL prefix for all routes
 * @property {boolean} [static=true] - Enable serving static files
 * @property {boolean} [watch=false] - Enable watch mode (rebuilds on file changes)
 * @property {boolean} [enableServerRoutes=true] - Enable server-side routes from server.js pages
 */

/**
 * Fastify plugin for DomStack
 * @param {FastifyInstance} fastify
 * @param {FastifyDomStackOptions} options
 */
async function fastifyDomstack(fastify, options) {
  if (!options.src) {
    throw new Error('options.src is required')
  }

  const src = resolve(options.src)
  const dest = resolve(options.dest || join(process.cwd(), '.fastify-domstack'))
  const prefix = options.prefix || '/'
  const serveStatic = options.static !== false
  const watchMode = options.watch === true
  const enableServerRoutes = options.enableServerRoutes !== false
  
  // Create destination directory if it doesn't exist
  await mkdir(dest, { recursive: true })
  
  // Initialize DomStack
  const domstack = new DomStack(src, dest, {
    static: true,
    ...options.domstackOpts
  })

  // Build the site
  try {
    const buildResult = await domstack.build()
    fastify.log.info('DomStack build completed successfully')
    
    if (buildResult.warnings?.length > 0) {
      fastify.log.warn(`DomStack build completed with ${buildResult.warnings.length} warnings`)
      for (const warning of buildResult.warnings) {
        if ('message' in warning) {
          fastify.log.warn(`  ${warning.message}`)
        } else {
          fastify.log.warn(warning)
        }
      }
    }
    
    fastify.log.info(`Pages: ${buildResult.siteData.pages.length} Layouts: ${Object.keys(buildResult.siteData.layouts).length} Templates: ${buildResult.siteData.templates.length}`)
  } catch (err) {
    fastify.log.error('DomStack build failed', err)
    throw err
  }
  
  // Set up fastify-static for serving static files
  if (serveStatic) {
    await fastify.register(fastifyStatic, {
      root: dest,
      prefix
    })
    fastify.log.info(`Serving static files from ${dest} at ${prefix}`)
  }
  
  // Start watching for changes if in watch mode
  if (watchMode) {
    fastify.log.info('Starting DomStack watch mode')
    
    try {
      await domstack.watch({
        serve: false // We don't need DomStack's browser-sync as Fastify is our server
      })
      
      fastify.log.info('DomStack watch mode started')
      
      // Clean up on close
      fastify.addHook('onClose', async () => {
        if (domstack.watching) {
          fastify.log.info('Stopping DomStack watch mode')
          await domstack.stopWatching()
        }
      })
    } catch (err) {
      fastify.log.error('Failed to start DomStack watch mode', err)
      throw err
    }
  }
  
  // Set up server-side routes from server.js files
  if (enableServerRoutes) {
    try {
      await setupServerRoutes(fastify, src, prefix, domstack)
    } catch (err) {
      fastify.log.error('Failed to set up server routes:', err)
      // Don't throw here, as we want the server to start even if server routes setup fails
    }
  }
  
  // Store the domstack instance in the fastify instance for later use
  fastify.decorate('domstack', domstack)
}

/**
 * Sets up server-side routes based on server.js files in the project
 * @param {FastifyInstance} fastify 
 * @param {string} src 
 * @param {string} prefix 
 * @param {DomStack} domstack 
 */
async function setupServerRoutes(fastify, src, prefix, domstack) {
  // First run identifyPages to find server routes
  const siteData = await identifyPages(src, domstack.opts)
  
  // If no serverRoutes property or it's empty, it means the identifyPages doesn't yet support server routes
  if (!siteData.serverRoutes || Object.keys(siteData.serverRoutes).length === 0) {
    fastify.log.info('No server routes found or server routes not yet supported in this version')
    return
  }
  
  // Register routes for each server.js file
  for (const dir in siteData.serverRoutes) {
    const serverRouteInfo = siteData.serverRoutes[dir]
    const routePath = dir === '' ? '/' : `/${dir}`
    // Make sure we handle the prefix correctly
    const prefixedPath = prefix === '/' 
      ? routePath 
      : join(prefix, routePath).replace(/\/+/g, '/')
    
    fastify.log.debug(`Registering server route for ${prefixedPath}`)
    
    try {
      // Import the server route module
      const serverRouteModule = await import(serverRouteInfo.filepath)
      const serverRouteHandler = serverRouteModule.default || serverRouteModule
      
      if (typeof serverRouteHandler !== 'function') {
        fastify.log.warn(`Server route at ${serverRouteInfo.filepath} does not export a function, skipping`)
        continue
      }
      
      // Register the route with fastify
      fastify.route({
        method: serverRouteModule.method || 'GET',
        url: prefixedPath,
        handler: async (request, reply) => {
          try {
            // Get the content from the server route handler
            const content = await serverRouteHandler(request, reply)
            
            // If the handler explicitly sent a response, don't do anything else
            if (reply.sent) return
            
            // If the handler returned a non-string (object), assume it's JSON
            if (typeof content !== 'string') {
              return content
            }
            
            // Get variables from the server route module
            const vars = serverRouteModule.vars || {}
            
            // Process the content through the layout system if needed
            if (vars.layout !== false) {
              const layoutName = vars.layout || 'root'
              const layout = siteData.layouts[layoutName]
              
              if (!layout) {
                fastify.log.warn(`Layout ${layoutName} not found for server route ${prefixedPath}`)
                return content
              }
              
              try {
                // Import the layout module
                const layoutModule = await import(layout.filepath)
                const layoutHandler = layoutModule.default || layoutModule
                
                if (typeof layoutHandler !== 'function') {
                  fastify.log.warn(`Layout ${layoutName} does not export a function`)
                  return content
                }
                
                // Apply the layout to the content
                const html = layoutHandler({
                  title: vars.title || '',
                  content,
                  vars: {
                    ...vars,
                    request,
                    reply
                  }
                })
                
                return html
              } catch (layoutErr) {
                fastify.log.error(`Error loading layout for ${prefixedPath}:`, layoutErr)
                return content // Return just the content without layout on error
              }
            }
            
            return content
          } catch (err) {
            fastify.log.error(`Error processing server route ${prefixedPath}:`, err)
            throw err
          }
        }
      })
    } catch (importErr) {
      fastify.log.error(`Error importing server route ${prefixedPath}:`, importErr)
      // Continue to next route rather than failing completely
    }
  }
  
  fastify.log.info(`Registered ${Object.keys(siteData.serverRoutes).length} server routes`)
}

export default fp(fastifyDomstack, {
  fastify: '4.x',
  name: 'fastify-domstack'
})